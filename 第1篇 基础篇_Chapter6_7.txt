目录：
	第6章 表单与v-model
		6.1 基本用法
		6.2 绑定值
		6.3 修饰符

第6章 表单与v-model
	表单类控件承载网页数据的录入与交互，使用指令v-model完成表单的数据双向绑定。
	1.基本用法
	表单类控件：单选、多选、下拉选择、输入框、文本域等
		1)输入框input text
			<div id="app">
				<input type="text" v-model="message" placeholder="输入...">
				<p>输入内容是：{{ message }}</p>
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						message: ''
					}
				})
			</script>
		2)文本域textarea
			<div id="app">
				<textarea v-model="text" placeholder="输入..."></textarea>
				<p>输入的内容是：{{ text }}</p>
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						text: ''
					}
				})
			</script>
			注：使用v-model后，表单控件显示的值只依赖所绑定的数据，不再关心初始化时的value属性，对于在<textarea></textarea>之间插入的值，也不会生效。
		3)单选按钮input radio
			• 单选按钮在单独使用时，不需要v-model，直接使用v-bind绑定布尔类型值，为真时选中，为否时不选。举例：
			<div id="app">
				<input type="radio" :checked="picked">
				<label>单选按钮</label>
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						picked: true
					}
				})
			</script>
			• 单选按钮组合使用时，需要v-model，举例：
			<div id="app">
				<!-- 
					<label> 标签下的for属性规定label与哪个表单元素绑定
					显式绑定：for属性值设置为目标表单id值
					隐式绑定：把input标签放在label标签里面
					<label><input type="radio" nmae="abc"></label>
				-->
				<input type="radio" v-model="picked" value="html" id="html">
				<label for="html">HTML</label>			
				<input type="radio" v-model="picked" value="js" id="js">
				<label for="js">JavaScript</label>			
				<input type="radio" v-model="picked" value="css" id="css">
				<label for="css">CSS</label>	
				<br>
				<p>选择的项是：{{ picked }}</p>		
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						picked: "js"
					}
				})
			</script>
		4)复选框input checkbox
			• 单独使用时，使用v-model绑定布尔值，举例：
			<div id="app">
				<input type="checkbox" v-model="checked" id="checked">
				<label for="checked">选择状态：{{ checked }}</label>
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						checked: false
					}
				})
			</script>
			• 组合使用时，使用v-model和value一起，多个勾选框都绑定到同一个数组类型的数据，value的值在数组中，就会选中这一项，这个过程也是双向的，在勾选时，value的值会自动push到数组中。
			举例：
			<div id="app">
				<input type="checkbox" v-model="checked" value="html" id="html">
				<label for="html">HTML</label>
				<input type="checkbox" v-model="checked" value="js" id="js">
				<label for="js">JavaScript</label>
				<input type="checkbox" v-model="checked" value="css" id="css">
				<label for="css">CSS</label>
				<br>
				<p>选择的项是： {{ checked }}</p>
			</div>
			<script>
				var app = new Vue({
					el: "#app",
					data: {
						checked: ['html', 'css']
					}
				})
			</script>
		5)选择列表（下拉选择器）select
			• 单选下拉选择器，举例：
			<div id="app">
				<select v-model="selected">
					<!-- 
						<option>是备选项，
						如果含有value属性，v-model就会优先匹配value的值：
						如果没有，就会直接匹配<option>的text，
						比如选中第二项时，selected的值是js，而不是JavaScript。
					-->
					<option>html</option>
					<option value="js">JavaScript</option>
					<option>CSS</option>
				</select>
				<p>选择的项是：{{ selected }}</p>
			</div>
			<script>
				var app = new Vue({
					el: "#app",
					data: {
						selected: 'html'
					}
				})
			</script>
			• 多选下拉选择器，给<select>添加属性mulitple就可以多选了，此时v-model绑定的是一个数组
			举例：
			<div id="app">
				<select v-model="selected" multiple>
					<option>html</option>
					<option value="js">JavaScript</option>
					<option>CSS</option>
				</select>
				<p>选择的项是：{{ selected }}</p>
			</div>
			<script>
				var app = new Vue({
					el: "#app",
					data: {
						selected: ['html', 'js']
					}
				})
			</script>
			• 多选下拉选择器，使用v-for动态输出<option>，v-bind动态输出value和text，举例：
			<div id="app">
				<select v-model="selected">
					<option v-for="option in options" 
							:value="option.value">{{ option.text }}</option>
				</select>
				<p>选择的项是：{{ selected }}</p>
			</div>
			<script>
				var app = new Vue({
					el: '#app',
					data: {
						selected: 'html',
						options: [
							{
								text: 'HTML',
								value: 'html'
							},					
							{
								text: 'JavaScript',
								value: 'js'
							},					
							{
								text: 'CSS',
								value: 'css'
							},
						]
					}
				})
			</script>
	2.绑定值
	在1.基本用法中，v-model绑定的值是一个静态字符或者布尔值。在需要绑定动态数据时，可以用v-bind实现。
		1)单选按钮：
			<div id="app">
				<input type="radio" v-model="picked" :value="value">
				<label>单选按钮</label>
				<p>{{ picked }}</p>
				<p>{{ value }}</p>
			</div>
			<script>
				var app = new Vue({
					el: "#app",
					data: {
						picked: false,
						value: 123
					}
				})
			</script>

