React是用js来包含html, 而Vue.js, Angular之类的是用html来包含js。

目录：
	第1章 初识Vue.js
	第2章 数据绑定和第一个Vue应用

第1章 初识Vue.js

	Vue.js:简单小巧，渐进式技术栈。
	1.解耦视图与数据
	2.可复用的组件
	3.前端路由,vue-router
	4.状态管理,vuex
	5.虚拟DOM(Virtual DOM)
	MVVM模式：Model-View-ViewModel，当View（视图层）变化时，会自动更新到ViewModel（视图模型），反之亦然。View 和ViewModel 之间通过双向绑定（tdata-binding ）建立联系

第2章 数据绑定和第一个Vue应用
	
	1.创建一个Vue根实例：
	var app = new Vue({
		//选项
		el: document.getElementByID('app') //'#app'

	})
	必不可少的选项： el，el用于指定一个页面中己存在的DOM元素来挂载Vue实例，它可以是HTMLElement，也可以是css选择器

	2.Vue的数据绑定：
	<input type="text" v-model="name" placeholder="你的名字">
	var app = new Vue({
		el: '#app',
		data: {
			name: ''
		}
	})
	在input 标签上，有一个v-model的指令，它的值对应于我们创建的Vue实例的data选项中的name字段，这就是Vue的数据绑定。
	通过Vue实例的data选项，可以声明应用内需要双向绑定的数据。
	建议所有会用到的数据都预先在data内声明，这样不至于将数据散落在业务逻辑中，难以维护。

	3.生命周期
	• created
		实例创建完成后调用，此阶段完成了数据的观测等，但尚未挂载，$el还不可用。需要初始化处理一些数据时会比较有用，后面章节将有介绍。
	• mounted 
		el挂载到实例上后调用，一般我们的第一个业务逻辑会在这里开始。
	• beforeDestroy
		实例销毁之前调用。主要解绑一些使用addEventListener监听的事件等。
	# 这些钩子与el和data类似，也是作为选项写入Vue实例内，并且钩子的this指向的是调用它的Vue实例

	var app = new Vue({
		el: '#app',
		data: {
			a: 2
		},
		created: function(){
			console.log(this.a) // 2
		},
		mounted: function(){
			console.log(this.$el); // <div id="app"></div>
		}
	})

	4.插值与表达式
	使用双大括号(Mustache语法){{ }}，会自动将双向绑定的数据实时显示出来
	<div id="app">
		{{ date }}
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data:{
				date: new Date()
			}
		})
	</script>

	v-html指令：输出HTML：
	<div id="app">
		<span v-html="link"></span>
	</div>
	<script>
		var app = new Vue({
			el: "#app",
			data: {
				link: '<a href="这是一个链接"></a>'
			}
		})
	</script>

	v-pre指令：显示｛｛｝｝标签，而不进行替换， 使用v-pre 即可跳过这个元素和它的子元素的编译过程，例如：
	<span v-pre>{{ 这里的内容是不会被编译的 }} </span>

	使用{{ }}，除了绑定属性值之外，还可以进行js的简单运算、三元运算等，例如：
	<div id="app">
		{{ number/10 }}
		{{ isOK ? '确定' : '取消' }}
		{{ text.split(',').reverse().join(',') }}
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data: {
				number: 100,
				isOK: false,
				text: '123,456'
			}
		})
	</script>
	Vue.js 只支持单个表达式，不支持语句和流控制。
	另外，在表达式中，不能使用用户自定义的全局变量， 只能使用Vue白名单内的全局变量，例如Math和Date。

	5.过滤器
	{{ | }}，对数据进行过滤，经常用于格式化文本，过滤的规则是自定义的，通过给Vue实例添加选项filters来设置。
	<div id="app">
		{{ date | formatDate}}
	</div>
	<script>
		//在月份、日期、小时等 小于10的时候前面补0
		var padDate = function(value){
			return value < 10 ? '0' + value : value;
		}
		var app = new Vue({
			el: '#app',
			data: {
				date: new Date()
			},
			filters: {
				formatDate: function(value){ //这里的value就是要过滤的数据
					var date = new Date(value);
					var year = date.getFullYear();
					var month = padDate(date.getMonth() + 1);
					var day = padDate(date.getDate() + 1);
					var hours = padDate(date.getHours() + 1);
					var minutes = padDate(date.getMinutes() + 1);
					var seconds = padDate(date.getSeconds() + 1);
					// 返回整理好的数据
					return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
				}
			}，
			mounted: function(){
				var _this = this; // 声明一个变量指向Vue实例this，保证作用域一致
				this.timer = setInterval(function(){
					_this.date = new Date(); //修改数据 date
				}, 1000);
			},
			beforeDestroy: function(){
				if(this.timer){
					clearInterval(this.timer); //  在Vue实例销毁前，清除定时器
				}
			}
		})
	</script>
	过滤器可以串联，还可以接收参数。
	{{ message | filterA | filterB }}
	{{ message | filterA('arg1', 'arg2') }} //字符串arg1和arg2分别传给过滤器的第二个和第三个参数，因为第一个参数是数据message本身。

	6.指令与事件
	指令（Directives）是Vue.js模板中最常用的一项功能，它带有前缀v-，之前用过的有：v-if, v-html, v-pre, v-model等。
	1)v-if指令：当数据show的值为true时，p元素会被插入，为false时则会被移除。
	<div id="app">
		<p v-if="show">显示这段文本</p>
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data:{
				show: true
			}
		})
	</script>
	2)v-bind指令：动态更新HTML元素上的属性，比如id、class等
	<div id="app">
		<a v-bind:href="url">链接</a>
		<img v-bind:src="imgUrl">
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data: {
				url: 'https://www.github.com',
				imgUrl: 'https://xx.xxx.xx/img.png'
			}
		})
	</script>
	3)v-on指令：绑定事件监听器
	在button按钮上，使用v-on:click给该元素绑定了一个点击事件，在普通元素上，v-on可以监听原生的DOM事件，除了click 外，还有dblclick、keyup、mousemove等。
	• 表达式可以是一个方法名，方法写在Vue的methods属性内，并且是函数形式。
	<div id="app">
		<p v-if="show">这是一段文本</p>
		<button v-on:click="handleClose">点击隐藏</button>
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data: {
				show: true
			},
			methods: {
				handleClose: function(){
					this.show = false;
				}
			}
		})
	</script>
	• 表达式还可以是一个内联语句：
	<div id="app">
		<p v-if="show">这是一段文本</p>
		<button v-on:click="show = false">点击隐藏</button>
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data: {
				show: true
			}
		})
	</script>
	• methods属性里面的方法可以使用this来调用：
	<div id="app">
		<p v-if="show">这是一段文本</p>
		<button v-on:click="handleClose">点击隐藏</button>
	</div>
	<script>
		var app = new Vue({
			el: '#app',
			data: {
				show: true
			},
			methods: {
				handleClose: function(){
					this.close();
				},
				close: function(){
					this.show = false;					
				}
			}
		})
	</script>

	7.语法糖
	语法糖是指在不影响功能的情况下，添加某种方法实现同样的效果，从而方便程序开发。
	1)v-bind缩写为冒号:
		<a v-bind:href="url">链接</a>
		<img v-bind:src="imgUrl">	
	缩写为：
		<a :href="url">链接</a>
		<img :src="imgUrl">
	2)v-on缩写为@：
		<button v-on:click="handleClose">点击隐藏</button>
	缩写为：
		<button @click="handleClose">点击隐藏</button>