目录：
	第7章 组件详解
		7.1 组件与复用
			全局注册： Vue.component('my-component', {})
			局部注册： 在vue实例中使用components选项
		7.2 使用props传递数据
			1.传递字符串数组：
				1)传递固定值
				2)传递动态值：v-bind绑定
			2.传递对象数据：用作数据类型验证（String, Number, Boolean, Array, Object, Function）
		7.3 组件通信
			父子组件通信：自定义事件、使用v-model
			非父子组件通信：中央事件总线（bus）、父链、子组件索引
			
第7章 组件详解
	Vue.js的组件：
		⭐ 提高重用性，让代码可复用。
		⭐ 组件间进行通信。
	1.组件与复用
		组件的用法：
			组件在使用之前需要先注册，注册分为全局注册和局部注册两种方式。
			1)全局注册：任何Vue实例都可以使用，直接使用Vue.component('my-component', {})进行注册
				<div id="app">
					<my-component></my-component>
				</div>
				<script>
					// 全局注册
					// my-component:注册的组件的自定义标签名称，推荐使用小写加减号分割的形式命名。
					Vue.component('my-component',{
						//选项，在组件中添加template就可以显示组件的内容了
						// template的DOM结构必须被一个元素（比如：<div></div>）包含，否则无法渲染
						template: '<div>这里是组件的内容</div>'
					});

					var app = new Vue({
						el: "#app"
					})
				</script>
			2)局部注册：在Vue实例中，使用components选项来局部注册组件，注册后的组件只能在该实例作用域下有效。组件中也可以继续使用components选项来注册组件，从而实现组件的嵌套。
				<div id="app">
					<my-component></my-component>
				</div>
				<script>
					var Child = {
						template: "<div>局部注册的内容</div>"
					}
					var app = new Vue({
						el: '#app',
						components: {
							'my-component': Child
						}
					})
				</script>
			3)一些需要注意的点：
				• Vue组件的模板在某些情况下会受到HTML的限制，比如<table>内规定只允许是<tr>、<td>、<th>等这些表格元素，所以在<table>内直接使用组件是无效的。这种情况下，可以使用特殊的is属性来挂载组件。常见的限制元素还有<ul>、<ol>、<select>
					举例：
					<div id="app">
						<table>
							<tbody is="my-component"></tbody>
						</table>
					</div>
					<script>
						Vue.component('my-component', {
							template: '<div>这里是组件的内容</div>'
						});

						var app = new Vue({
							el: '#app'
						})
					</script>
					注：tbody在渲染时，会被替换为组件的内容。
				• 组件中除了template选项以外，还可以使用Vue实例的其他选项，比如data、computed、methods、filters等。在使用data时，和实例稍有区别，
				data必须是函数，然后将数据return出去。
					举例：
					<div id="app">
						<my-component></my-component>
					</div>
					<script>
						Vue.component('my-component', {
							template: '<div>{{ message }}</div>',
							data: function(){
								return {
									message: '全局注册的组件内容'
								}
							}
						});

						var app = new Vue({
							el: '#app'
						})
					</script>
				• JavaScript对象的引用关系，如果return出的对象引用了一个外部对象，那这个对象就是共享的，任何一方修改都会同步。
					示例：组件使用了3次，但是点击任意一个button，3个数字都会加1，原因是组件的data选项return的data引用的是外部对象。
					<div id="app">
						<my-component></my-component>
						<my-component></my-component>
						<my-component></my-component>
					</div>
					<script>
						var data = {
							counter: 0
						}

						Vue.component('my-component', {
							template: '<button @click="counter++">{{ counter }}</button>',
							data: function(){
								return data;
							}
						});

						var app = new Vue({
							el: '#app'
						})
					</script>
					注：因此，必须给组件返回一个新的data对象来独立，这样，点击3个按钮就互不影响了，完全达到复用的目的。
					示例：
					<div id="app">
						<my-component></my-component>
						<my-component></my-component>
						<my-component></my-component>
					</div>
					<script>
						Vue.component('my-component', {
							template: '<button @click="counter++">{{ counter }}</button>',
							data: function(){
								return {
									counter: 0
								};
							}
						});

						var app = new Vue({
							el: '#app'
						})
					</script>
	2.使用props传递数据
	• 组件间要进行通信，父组件的模板中包含子组件，父组件要正向地向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。这个正向传递数据的过程就是通过props来实现的。
	• 在组件中，使用props选项来声明需要草丛父级接收的数据，props的值可以是两种，一种是字符串数组，一种是对象。
	• 单向数据流：在Vue 2.x版本中，使用props选项传递数据是单向的，即父组件数据变化时会传递给子组件，但是反过来不行。而在Vue 1.x里提供了.sync修饰符来支持双向绑定。
		1)props选项，使用字符串数组传递数据，常用于传递业务数据
		示例：
			<div id="app">
				<my-component message="来自父组件的数据"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					props: ['message'],
					template: '<div>{{ message }}</div>'
				});
				var app = new Vue({
					el: '#app'
				})
			</script>
		注意：props中声明的数据与组件data函数return的数据主要区别是props的来自父级，而data中的是组件自己的数据，作用域是组件本身，这两种数据都可以在模板template及计算属性computed和方法methods中使用。
		⭐ 由于HTML特性不区分大小写，当使用DOM模板时，驼峰命名（camelCase）的props名称要转为短横分隔命名（kebab-case）
		示例：
			<div id="app">
				<my-component warning-text="提示信息"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					props: ['warningText'],
					template: '<div>{{ warningText }}</div>'
				});

				var app = new Vue({
					el: '#app',
				})
			</script>
		⭐ 传递来自父级的动态数据，需要使用v-bind绑定props的值，当父组件的数据变化时，也会传递给子组件。
		示例：
			<div id="app">
				<input type="text" v-model="parentMessage">
				<my-component :message="parentMessage"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					props: ['message'],
					template: '<div>{{ message }}</div>'
				});
				var app = new Vue({
					el: '#app',
					data: {
						parentMessage: ''
					}
				})
			</script>
			注释：这里用v-model绑定了父组件的parentMessage，当通过输入框任意输入时，子组件通过props选项接收到的"message"参数也会实时响应，并更新组件模板。
		⭐ 注意：如果直接传递数字、布尔值、数组、对象等，而不使用v-bind进行绑定，那么传递的仅仅是字符串，而不是参数。
		示例：
			<div id="app">
				<!-- 传递一个数组，第一种会把[1,2,3]全部当做字符看待，输出整个字符串的长度7 -->
				<!-- 传递一个数组，第二种才是传递一个数组，输出数组的长度3 -->
				<my-component message="[1,2,3]"></my-component>
				<my-component :message="[1,2,3]"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					props: [message],
					template: '<div>{{ message.length }}</div>'
				});
				var app = new Vue({
					el: '#app'
				})
			</script>
		⭐ 业务中常用的两种情况：
			①父组件传递初始值进来，子组件将它作为初始值保存起来，在自己的作用域下可以随意使用和修改。
			这种情况可以在组件data再声明一个数据，引用父组件的prop，示例：
				<div id="app">
					<my-component :initial-count="1"></my-component>
				</div>
				<script>
					Vue.component('my-component', {
						props: ['initialCount'],
						template: '<div>{{ count }}</div>',
						data:function(){
							return {
								count: this.initialCount
							}
						}
					});

					var app = new Vue({
						el: '#app'
					})
				</script>
				注释：组件中声明了数据count，它在组件初始化时会获取来自父组件的initialCount，之后就与之无关了，只用维护count，这样就可以避免直接操作initialCount
			② prop作为需要被转变的原始值传入，使用计算属性即可。
				<div id="app">
					<my-component :width="100"></my-component>
				</div>
				<script>
					Vue.component('my-component', {
						props: ['width'],
						template: '<div :style="style">组件内容</div>',
						computed:{
							style:function(){
								return {
									width: this.width + 'px'
								}
							}
						}
					});
					
					var app = new Vue({
						el: '#app'
					})
				</script>
				注释：统一在组件内使用计算属性设置CSS宽度并带单位（px）
		⭐ 注意：在JavaScript中，数组和对象都是引用类型，指向同一内存空间，所以props是数组或对象时，在子组件内改变是会影响父组件的。
		2)props选项，使用对象传递数据，一般用作数据验证
		当你的组件提供给别人使用时，一般推荐进行数据验证，验证的type类型可以是：String、Number、Boolean、Array、Object、Function，type也可以是一个自定义构造器，使用instanceof检测。当props验证失败时，在开发版本下会在控制台抛出一条警告。
		示例如下：
			<script>
				Vue.component('my-component', {
					props:{
						// 必须是数字类型
						propA: Number,
						// 必须是字符串或数字类型
						propB: [String,Number],
						// 必须是布尔值，默认为true
						propC: {
							type: Boolean,
							default: true
						},
						// 必须是数字类型，而且是必传参数
						propD: {
							type: Number,
							required: true
						},
						// 如果必须是数组或者对象，默认值必须是一个函数来返回
						propE: {
							type: Array,
							default: function(){
								return [];
							}
						},
						// 自定义一个验证函数
						propF: {
							validator:function(value){
								return value > 10;
							}
						}
					}
				});
			</script>
	3.组件通信
	组件关系可分为父子组件通信、兄弟组件通信、跨级组件通信。
		1)自定义事件
		当子组件向父组件传递数据时，需要用到自定义事件。v-on用于组件之间当自定义事件。
		Vue组件中子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。父组件也可以直接在子组件的自定义标签上使用v-on来监听子组件触发的自定义事件。
		示例：
			<div id="app">
				<p>总数： {{ total }}</p>
				<my-component 
					@increase="handleGetTotal"
					@reduce="handleGetTotal"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					template: '\
					<<div>\
						<<button @click="handleIncrease">+1</button>\
						<<button @click="handleReduce">-1</button>\
					</div>',
					data: function(){
						return {
							counter: 0
						}
					},
					methods:{
						handleIncrease:function(){
							this.counter++;
							this.$emit('increase', this.counter);
						},
						handleReduce:function(){
							this.counter--;
							this.$emit('reduce', this.counter);
						}
					}
				});

				var app = new Vue({
					el: '#app',
					methods: {
						handleGetTotal:function(total){
							this.total = total;
						}
					}
				})
			</script>
			注释：子组件有两个按钮，分别实现加1和减1的效果，在改变组件的data"counter"后，通过$emit()传递给父组件,父组件用v-on:increase【$emit()方法的第一个参数名称】和v-on:reduce【$emit()方法的第一个参数名称】（示例是语法糖写法）来监听触发的事件并获取到传递过来的数据。$emit()方法第一个参数是自定义事件的名称，剩余参数是要传递的数据，可以不填或者填写多个。
			除了用v-on在组件上监听自定义事件外，也可以监听原生DOM事件，这时可以用.native修饰符表示监听的是一个原生事件，监听的是该组件的根元素，示例：
			<my-component v-on:click.native="handleClick"></my-component>
		2)使用v-model
		Vue 2.x可以在自定义组件上使用v-model指令，示例：
			<div id="app">
				<p>总数： {{ total }}</p>
				<my-component v-model="total"></my-component>
			</div>
			<script>
				Vue.component('my-component', {
					template: '<button @click="handleClick">+1</button>',
					data: function(){
						return {
							counter: 0
						}
					},
					methods:{
						handleClick:function(){
							this.counter++;
							this.$emit('input', this.counter);
						}
					}
				});
				var app = new Vue({
					el: '#app',
					data: {
						total: 0
					}
				})
			</script>
			⭐ 仍然是点击按钮加1的效果，这个$emit()的事件名是特殊的input，在使用组件的父级，并没有在<my-component>上使用@input="handler"，而是直接使用了v-model绑定的一个数据total，这可以称作是一个语法糖。间接使用自定义事件来实现的话，示例如下：
				<div id="app">
					<p>总数：{{ total }}</p>
					<my-component @input="handleGetTotal"></my-component>
				</div>
				<script>
					Vue.component('my-component', {
						template: '<button @click="handleClick">+1</button>',
						data: function(){
							return {
								counter: 0
							}
						},
						methods:{
							handleClick:function(){
								this.counter++;
								this.$emit('input', this.counter);
							}
						}
					});
					var app = new Vue({
						el: '#app',
						data: {
							total: 0
						},
						methods:{
							handleGetTotal:function(total){
								this.total = total;
							}
						}
					})
				</script>
			⭐ v-model还可以用来创建自定义的表单输入组件，进行数据双向绑定，
			实现一个具有双向绑定的v-model组件需要满足两个要求：
				①接收一个value属性；
				②在有新的value时触发事件。
			示例：
				<div id="app">
					<p>总数：{{ total }}</p>
					<my-component v-model="total"></my-component>
					<button @click="handleReduce">-1</button>
				</div>
				<script>
					Vue.component('my-component', {
						props: ['value'],
						template: '<input :value="value" @input="updateValue" />',
						methods: {
							updateValue: function(event){
								this.$emit('input', event.target.value);
							}
						}
					});
					var app = new Vue({
						el: '#app',
						data: {
							total: 0
						},
						methods: {
							handleReduce:function(){
								this.total--;
							}
						}
					})
				</script>
		3)非父子组件通信
		非父子组件一般有两种，兄弟组件和跨多级组件。非父子组件通信的方法有三种：中央事件总线（bus）、父链、子组件索引。
			⭐ 中央事件总线（bus）
			使用一个空的Vue实例作为中央事件总线（bus），轻量地实现任何组件间的通信，包括父子、兄弟、跨级等。
			示例：
				<div id="app">
					{{ message }}
					<component-a></component-a>
				</div>
				<script>
					var bus = new Vue();
					Vue.component('component-a', {
						template: '<button @click="handleEvent">传递事件</button>',
						methods:{
							handleEvent:function(){
								bus.$emit('on-message', '来自组件component-a的内容');
							}
						}
					});

					var app = new Vue({
						el: '#app',
						data: {
							message: ''
						},
						mounted: function(){
							var _this = this;
							//在实例初始化时，监听来自bus实例的事件
							bus.$on('on-message', function(msg){
								_this.message = msg;
							});
						}
					})
				</script>
				注释：首先创建一个bus空的Vue实例；然后全局注册一个组件component-a；最后创建Vue实例app，在app初始化时，即在生命周期mounted钩子函数里监听来自bus的事件on-message而在组件component-a中，点击按钮会通过bus把事件on-message发出去，此时app就会接收到来自bus的事件，进而在回调里完成自己的业务逻辑。
			⭐ 父链
			在子组件中，使用this.$parent可以直接访问该组件的父实例或组件，父组件也可以通过this.$children访问它所有的子组件，而且可以递归向上或向下无线访问，直到根实例或最内层的组件。
				示例：子组件通过父链直接修改父组件的数据
				<div id="app">
					{{ message }}
					<component-b></component-b>
				</div>
				<script>
					Vue.component('component-b', {
						template: '<button @click="handleEvent">通过父链直接修改数据</button>',
						methods:{
							handleEvent:function(){
								this.$parent.message = '来自组件component-b的内容';
							}
						}
					});
					var app = new Vue({
						el: '#app',
						data: {
							message: ''
						}
					})
				</script>
				注释：尽管Vue允许这样操作，但是在业务中，子组件应该尽可能地避免依赖父组件的数据，更不应该去主动修改它的数据，因为这样使得父子组件紧耦合，只看父组件，很难理解父组件的状态，因为塔可能被任意组件修改，理想情况下，只有组件自己能修改它的状态。父子组件最好还是通过props和$emit来通信。
			⭐ 子组件索引
			当子组件较多时，使用this.$children来遍历是比较困难的。vue提供了子组件索引的方法，使用特殊属性ref来为子组件指定一个索引名称。在父组件模板中，子组件标签上使用ref指定一个名称，并在父组件内通过this.$refs.名称 来访问指定名称的子组件。
			示例：
				<div id="app">
					<button @click="handleRef">通过ref获取子组件实例</button>
					<component-c ref="comC"></component-c>
				</div>
				<script>
					Vue.component('component-c', {
						template: "<div>子组件component-c</div>",
						data: function(){
							return {
								message: '子组件内容'
							}
						}
					});
					var app = new Vue({
						el: '#app',
						methods: {
							handleRef:function(){
								var msg = this.$refs.comC.message;
								console.log(msg);
							}
						}
					})
				</script>
				注释：$refs只有在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案，应当避免在模板或计算属性中使用$refs。
				在Vue 2.x中，将v-el和v-ref合并为了ref，Vue 2.x会自动判断是普通标签还是组件。
				示例：
					<div id="app7">
						<p ref="p"></p>
						<child-component ref="child"></child-component>
					</div>
					<script>
						Vue.component('child-component', {
							template: '<p>child</p>'
						});
						var app7 = new Vue({
							el: '#app7',
							mounted(){
								// <p></p>
								console.log(this.$refs.p);
								// VueComponent
								console.log(this.$refs.child);
							}
						})
					</script>